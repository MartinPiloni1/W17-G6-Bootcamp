package repository

import (
	"context"
	"database/sql"
	"errors"

	"github.com/aaguero_meli/W17-G6-Bootcamp/internal/models"
	"github.com/aaguero_meli/W17-G6-Bootcamp/pkg/httperrors"
	"github.com/go-sql-driver/mysql"
)

type BuyerRepositoryDB struct {
	db *sql.DB
}

// Generates a repository with the db connection as parameter
func NewBuyerRepositoryDB(db *sql.DB) *BuyerRepositoryDB {
	return &BuyerRepositoryDB{db: db}
}

// Create inserts a new Buyer into the database.
//
// Returns the created Buyer with its generated ID, or an error if the operation fails.
func (r *BuyerRepositoryDB) Create(ctx context.Context, newBuyer models.BuyerAttributes) (models.Buyer, error) {
	query := `
		INSERT INTO 
			buyers (card_number_id, first_name, last_name)
		VALUES (?, ?, ?)
	`

	result, err := r.db.ExecContext(
		ctx,
		query,
		newBuyer.CardNumberId,
		newBuyer.FirstName,
		newBuyer.LastName,
	)
	if err != nil {
		if mysqlErr, ok := err.(*mysql.MySQLError); ok {
			if mysqlErr.Number == 1062 {
				// cardNumberId is unique
				return models.Buyer{}, httperrors.ConflictError{Message: "CardNumberId already in use"}
			}
		}
		return models.Buyer{}, err
	}

	// Obtain autogenerated Id
	lastID, err := result.LastInsertId()
	if err != nil {
		return models.Buyer{}, err
	}

	var buyer models.Buyer = models.Buyer{
		Id:              int(lastID),
		BuyerAttributes: newBuyer,
	}

	return buyer, nil
}

// GetAll retrieves all Buyers from the database with all the data for each one.
//
// Returns a slice of Buyers or an error if the query fails.
func (r *BuyerRepositoryDB) GetAll(ctx context.Context) ([]models.Buyer, error) {
	const query = `
        SELECT 
			b.id,
			b.first_name, 
			b.last_name, 
			b.card_number_id 
        FROM 
			buyers b
    `
	rows, err := r.db.QueryContext(ctx, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	buyers := make([]models.Buyer, 0)
	for rows.Next() {

		var buyer models.Buyer
		err := rows.Scan(
			&buyer.Id,
			&buyer.FirstName,
			&buyer.LastName,
			&buyer.CardNumberId,
		)

		if err != nil {
			return nil, err
		}
		buyers = append(buyers, buyer)
	}

	err = rows.Err()
	if err != nil {
		return nil, err
	}
	return buyers, nil
}

// GetByID fetches a Buyer by its ID from the database.
//
// Returns the Buyer if found, or an error if not found or if a database error occurs.
func (r *BuyerRepositoryDB) GetByID(ctx context.Context, id int) (models.Buyer, error) {
	const query = `
		SELECT
			b.id,
			b.first_name, 
			b.last_name, 
			b.card_number_id
		FROM
			buyers b
		WHERE
			b.id = ?
	`
	row := r.db.QueryRowContext(ctx, query, id)

	var buyer models.Buyer
	err := row.Scan(&buyer.Id, &buyer.FirstName, &buyer.LastName, &buyer.CardNumberId)

	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return models.Buyer{}, httperrors.NotFoundError{Message: "Buyer not found"}
		}

		return models.Buyer{}, err
	}
	return buyer, nil
}

// modifies the Buyer with the given ID in the database using the provided updatedBuyer fields.
// Returns the updated Buyer if the operation is successful, or an error if the update fails.
func (r *BuyerRepositoryDB) Update(ctx context.Context, id int, updatedBuyer models.Buyer) (models.Buyer, error) {
	query := `
        UPDATE 
			buyers b
        SET 
			b.card_number_id = ?, 
			b.first_name = ?, 
			b.last_name = ?
        WHERE 
			b.id = ?
    `

	_, err := r.db.ExecContext(
		ctx,
		query,
		updatedBuyer.CardNumberId,
		updatedBuyer.FirstName,
		updatedBuyer.LastName,
		id,
	)
	if err != nil {
		return models.Buyer{}, err
	}

	return updatedBuyer, nil
}

// Deletes a Buyer by its id if it exists
//
// # Returns
//
// - not found if it dosent exist or a database/sql error
// - nil if the deletion was a successfull
func (r *BuyerRepositoryDB) Delete(ctx context.Context, id int) error {
	query := `
		DELETE FROM 
			buyers b
		WHERE 
			b.id = ?
	`

	result, err := r.db.ExecContext(ctx, query, id)
	if err != nil {
		return err
	}

	rowsAffected, err := result.RowsAffected()
	if err != nil {
		return err
	}

	if rowsAffected == 0 {
		return httperrors.NotFoundError{Message: "Buyer not found"}
	}

	return nil
}

// checks whether a buyer with the given card_number_id already exists in the database.
//
// Returns:
//   - true and nil error if a buyer with the provided card_number_id exists.
//   - false and nil error if no buyer with that card_number_id exists.
//   - false and a non-nil error if an unexpected error occurs during the query.
func (r *BuyerRepositoryDB) CardNumberIdAlreadyExist(ctx context.Context, newCardNumberId int) (bool, error) {
	const query = `
		SELECT EXISTS(
			SELECT 1 FROM buyers WHERE card_number_id = ?
		)
	`
	var exists bool
	err := r.db.QueryRowContext(ctx, query, newCardNumberId).Scan(&exists)
	if err != nil {
		return false, err
	}
	return exists, nil
}
